# -*- coding: utf-8 -*-
"""Regresion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBLuiYeRS1bMmOyAAnDTwdZqJe9O1nzG
"""

import numpy as np
import pandas as pd

def read_document(name_archivo, columns):
    route = "drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + name_archivo
    data = pd.read_csv(route)    

    a = data.to_string()
    a = a.replace(" ","")
    a = a.replace("\\t"," ")
    a = a.replace("\n"," ")
    words_temp = np.array(a.split(' '))
    words = np.full([int(words_temp.size / columns), columns], "         ")

    for i in range(0, columns):
        for x in range (i, words_temp.size, columns):
            words[int(x / columns), i] = words_temp[x]

    for x in range(1, int(words.size / columns)):
        cant_drope = str(x - 1)
        word_temp = words[x, 0]
        words[x, 0] = word_temp[len(cant_drope):]
    words = words[1:,:]
    return words;

def read_document_divided(name_archivo, columns):
    route = "drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + name_archivo
    data = pd.read_csv(route, index_col = 0)

    a = data.to_string()
    a = a.replace("\n"," ")
    seguir_0 = True
    i = 0
    while seguir_0 == True and i < len(a):
        if a[i] == '0':
            a = a[i + 1:]
            seguir_0 = False
        i += 1
    a = " ".join(a.split())
    words_temp = np.array(a.split(' '))
    words = np.full([int(words_temp.size / columns), columns], "         ")
    for i in range(0, columns):
        for x in range (i, words_temp.size, columns):
            words[int(x / columns), i] = words_temp[x]
    return words;

def separate_data(nparray, columns, nombre_csv):
    # 70%-train     30%-test
    tam70 = int((nparray.size / columns) * 0.7) + 1

    ar_train = np.array(nparray[0:tam70, 0:])
    ar_test = np.array(nparray[tam70:, 0:])

    df_train = pd.DataFrame(ar_train)
    df_test = pd.DataFrame(ar_test)

    # print(ar_train.shape)
    # print(ar_test.shape)

    df_train.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-train.csv", index = 0)
    df_test.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-test.csv", index = 0)


def write_data(nparray, nombre_csv):
    df_train = pd.DataFrame(nparray)

    # print(ar_train.shape)
    # print(ar_test.shape)

    df_train.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-train.csv", index = 0)

# Leo documentos
oceano = read_document("oceano.csv", 2)
casa = read_document("casa.csv", 2)
petroleo = read_document("petroleo.csv", 5)


# normalizo los datos
oceano = oceano[:,:].astype(float)
casa = casa[:,:].astype(float)
petroleo = petroleo[:,:].astype(float)

temp = oceano[:,0]
oceano[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = oceano[:,1]
oceano[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))

temp = casa[:,0]
casa[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = casa[:,1]
casa[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))

temp = petroleo[:,0]
petroleo[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,1]
petroleo[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,2]
petroleo[:,2] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,3]
petroleo[:,3] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,4]
petroleo[:,4] =  (temp - float(np.mean(temp))) / float(np.std(temp))


# Separo train y en test
separate_data(oceano, 2, "oceano")
separate_data(casa, 2, "casa")
separate_data(petroleo, 2, "petroleo")

# Leo los train
oceano_train = read_document_divided("oceano-train.csv", 2)
casa_train = read_document_divided("casa-train.csv", 2)
petroleo_train = read_document_divided("petroleo-train.csv", 5)


# Agregando columna de 1s
temp = np.zeros([oceano_train.shape[0], oceano_train.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = oceano_train[:,:]
oceano_train = temp;

temp = np.zeros([casa_train.shape[0], casa_train.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = casa_train[:,:]
casa_train = temp;

temp = np.zeros([petroleo_train.shape[0], petroleo_train.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = petroleo_train[:,:]
petroleo_train = temp;

# print(oceano_train)
# print(casa_train)
# print(petroleo_train)

write_data(oceano_train, "oceano")
write_data(casa_train, "casa")
write_data(petroleo_train, "petroleo")

#Leo los datos training ya para ser usados
oceano_train = read_document_divided("oceano-train.csv", 3)
casa_train = read_document_divided("casa-train.csv", 3)
petroleo_train = read_document_divided("petroleo-train.csv", 6)

oceano_train = oceano_train[:,:].astype(float)
casa_train = casa_train[:,:].astype(float)
petroleo_train = petroleo_train[:,:].astype(float)

# ecuacion normal
data_x = oceano_train[:,:2]
data_y = oceano_train[:,2]
normal_oceano = (np.linalg.inv(data_x.transpose().dot(data_x)).dot(data_x.transpose())).dot(data_y)

data_x = casa_train[:,:2]
data_y = casa_train[:,2]
normal_casa = (np.linalg.inv(data_x.transpose().dot(data_x)).dot(data_x.transpose())).dot(data_y)

data_x = petroleo_train[:,:5]
data_y = petroleo_train[:,5]
normal_petroleo = (np.linalg.inv(data_x.transpose().dot(data_x)).dot(data_x.transpose())).dot(data_y)

print(normal_oceano)
print(normal_casa)
print(normal_petroleo)

def costo(thetas, nparray):
    valor1 = 1 / 2 * (nparray.shape[0])
    #costo = valor1 * dot(x,theta)-y

    func_h = np.dot(nparray[:, :nparray.shape[1] - 1], thetas)
    resultado = np.power( (func_h - nparray[:, nparray.shape[1] - 1]) , 2)
    return ( np.sum(resultado) ) / (2 * nparray.shape[0])

def gradiente(thetas, nparray, ite, alfa):
    i = int(0)
    while (i < ite):
        valor1 = alfa / (nparray.shape[0])

        thetas = thetas - valor1 * (nparray[:, :nparray.shape[1] - 1].transpose().dot(nparray[:, :nparray.shape[1] - 1].dot(thetas) - nparray[:, nparray.shape[1] - 1]))
        i += 1
        
    return thetas

gradiente_oceano = gradiente([0,0], oceano_train, 10, 1)
gradiente_casa = gradiente([0,0], casa_train, 10, 1)
gradiente_petroleo = gradiente([0,0,0,0,0], petroleo_train, 10, 1)

costo_oceano = costo(normal_oceano, oceano_train)
print(costo_oceano)
costo_casa = costo(normal_casa, casa_train)
print(costo_casa)
costo_petroleo = costo(normal_petroleo, petroleo_train)
print(costo_petroleo)

costo_oceano = costo(gradiente_oceano, oceano_train)
print(costo_oceano)
costo_casa = costo(gradiente_casa, casa_train)
print(costo_casa)
costo_petroleo = costo(gradiente_petroleo, petroleo_train)
print(costo_petroleo)
