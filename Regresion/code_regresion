# -*- coding: utf-8 -*-
"""Regresion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBLuiYeRS1bMmOyAAnDTwdZqJe9O1nzG
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def read_document(name_archivo, columns):
    route = "drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + name_archivo
    data = pd.read_csv(route)    

    a = data.to_string()
    a = a.replace(" ","")
    a = a.replace("\\t"," ")
    a = a.replace("\n"," ")
    words_temp = np.array(a.split(' '))
    words = np.full([int(words_temp.size / columns), columns], "         ")

    for i in range(0, columns):
        for x in range (i, words_temp.size, columns):
            words[int(x / columns), i] = words_temp[x]

    for x in range(1, int(words.size / columns)):
        cant_drope = str(x - 1)
        word_temp = words[x, 0]
        words[x, 0] = word_temp[len(cant_drope):]
    words = words[1:,:]
    return words;


def read_document_divided(name_archivo, columns):
    route = "drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + name_archivo
    data = pd.read_csv(route, index_col = 0)

    a = data.to_string()
    a = a.replace("\n"," ")
    seguir_0 = True
    i = 0
    while seguir_0 == True and i < len(a):
        if a[i] == '0':
            a = a[i + 1:]
            seguir_0 = False
        i += 1
    a = " ".join(a.split())
    words_temp = np.array(a.split(' '))
    words = np.full([int(words_temp.size / columns), columns], "         ")
    for i in range(0, columns):
        for x in range (i, words_temp.size, columns):
            words[int(x / columns), i] = words_temp[x]


    words = words[:,:].astype(float)
    
    return words;


def separate_data(nparray, nombre_csv):
    # 70%-train     30%-test
    tam70 = int(nparray.shape[0] * 0.7) + 1

    ar_train = np.array(nparray[0:tam70, 0:])
    ar_test = np.array(nparray[tam70:, 0:])

    df_train = pd.DataFrame(ar_train)
    df_test = pd.DataFrame(ar_test)

    # print(ar_train.shape)
    # print(ar_test.shape)

    df_train.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-train.csv", index = 0)
    df_test.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-test.csv", index = 0)


def write_data(nparray, nombre_csv):
    df_train = pd.DataFrame(nparray)
    # print(ar_train.shape)
    # print(ar_test.shape)
    df_train.to_csv("drive/My Drive/Colab Notebooks/Regresion Homework/Datasets/" + nombre_csv + "-train.csv", index = 0)

# Leo documentos
oceano = read_document("oceano.csv", 2)
casa = read_document("casa.csv", 2)
petroleo = read_document("petroleo.csv", 5)


# normalizo los datos
oceano = oceano[:,:].astype(float)
casa = casa[:,:].astype(float)
petroleo = petroleo[:,:].astype(float)

temp = oceano[:,0]
oceano[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = oceano[:,1]
oceano[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))

temp = casa[:,0]
casa[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = casa[:,1]
casa[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))

temp = petroleo[:,0]
petroleo[:,0] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,1]
petroleo[:,1] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,2]
petroleo[:,2] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,3]
petroleo[:,3] =  (temp - float(np.mean(temp))) / float(np.std(temp))
temp = petroleo[:,4]
petroleo[:,4] =  (temp - float(np.mean(temp))) / float(np.std(temp))

# Agregando columna de 1s
temp = np.zeros([oceano.shape[0], oceano.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = oceano[:,:]
oceano = temp;

temp = np.zeros([casa.shape[0], casa.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = casa[:,:]
casa = temp;

temp = np.zeros([petroleo.shape[0], petroleo.shape[1] + 1])
temp[:,0] = 1
temp[:,1:] = petroleo[:,:]
petroleo = temp;


# Separo train y en test
separate_data(oceano, "oceano")
separate_data(casa, "casa")
separate_data(petroleo, "petroleo")

# Funciones
def ecuacion_normal(nparray):
    data_x = nparray[:,:nparray.shape[1] - 1]
    data_y = nparray[:,nparray.shape[1] - 1]
    result = (np.linalg.inv(data_x.transpose().dot(data_x)).dot(data_x.transpose())).dot(data_y)
    return result


def costo(thetas, nparray):
    # valor1 = 1 / (2 * (nparray.shape[0]))   
    #costo = valor1 * dot(x,theta)-y
    func_h = np.dot(nparray[:, :nparray.shape[1] - 1], thetas)
    resultado = np.power( (func_h - nparray[:, nparray.shape[1] - 1]) , 2)
    return ( np.sum(resultado) ) / (2 * nparray.shape[0])


def gradiente(thetas, nparray, ite, alfa):
    i = int(0)
    while (i < ite):
        valor1 = alfa / (nparray.shape[0])
        thetas = thetas - valor1 * (nparray[:, :nparray.shape[1] - 1].transpose().dot(nparray[:, :nparray.shape[1] - 1].dot(thetas) - nparray[:, nparray.shape[1] - 1]))
        i += 1
    return thetas

def orden(array):
    return array[array[:,1].argsort()]

#Leo los datos training ya para ser usados
oceano_train = read_document_divided("oceano-train.csv", 3)
oceano_train = orden(oceano_train)

casa_train = read_document_divided("casa-train.csv", 3)
casa_train = orden(casa_train)

petroleo_train = read_document_divided("petroleo-train.csv", 6)
petroleo_train = orden(petroleo_train)



oceano_test = read_document_divided("oceano-test.csv", 3)
oceano_test = orden(oceano_test)

casa_test = read_document_divided("casa-test.csv", 3)
casa_test = orden(casa_test)

petroleo_test = read_document_divided("petroleo-test.csv", 6)
petroleo_test = orden(petroleo_test)


# oceano_train = oceano_train[:,:].astype(float)
# casa_train = casa_train[:,:].astype(float)
# petroleo_train = petroleo_train[:,:].astype(float)

# Experimento 1

# CASA
normal_casa_train = ecuacion_normal(casa_train)
normal_casa_test = ecuacion_normal(casa_test)

costo_casa_train = costo(normal_casa_train, casa_train)
costo_casa_test = costo(normal_casa_test, casa_test)

print("CASA")
print(costo_casa_train)
print(costo_casa_test)


# OCEANO
normal_oceano_train = ecuacion_normal(oceano_train)
normal_oceano_test = ecuacion_normal(oceano_test)

costo_oceano_train = costo(normal_oceano_train, oceano_train)
costo_oceano_test = costo(normal_oceano_test, oceano_test)

print("OCEANO")
print(costo_oceano_train)
print(costo_oceano_test)


# PETROLEO
normal_petroleo_train = ecuacion_normal(petroleo_train)
normal_petroleo_test = ecuacion_normal(petroleo_test)

costo_petroleo_train = costo(normal_petroleo_train, petroleo_train)
costo_petroleo_test = costo(normal_petroleo_test, petroleo_test)

print("PETROLEO")
print(costo_petroleo_train)
print(costo_petroleo_test)

# Experimento 2
tasa = np.array([0.01, 0.05, 0.1, 0.2, 0.3, 0.4])
ite = np.array([500, 1000, 1500, 2000, 2500, 3000, 3500])

# CASA
print("CASA")
for t in tasa:
    for i in ite:
        gra = gradiente([0,0], casa_train, i, t)
        cos = costo(gra, casa_train)
        print("iteraciones: ", i, " tasa: ", t, " costo: ", cos)

# OCEANO
print("\nOCEANO")
for t in tasa:
    for i in ite:
        gra = gradiente([0,0], oceano_train, i, t)
        cos = costo(gra, oceano_train)
        print("iteraciones: ", i, " tasa: ", t, " costo: ", cos)

# PETROLEO
print("\nPETROLEO")
for t in tasa:
    for i in ite:
        gra = gradiente([0,0,0,0,0], petroleo_train, i, t)
        cos = costo(gra, petroleo_train)
        print("iteraciones: ", i, " tasa: ", t, " costo: ", cos)

# EXPERIMENTO 3

# casa_train

normal_casa_train = ecuacion_normal(casa_train)
gradiente_casa_train = gradiente([0, 0], casa_train, 300, 0.01)


# Initialize the figure and axes
fig, ax = plt.subplots(1, figsize=(8, 6))
fig.suptitle('Precio Vivienda ', fontsize=15)

i = -2
s = 4
temp = [normal_casa_train[0] + (normal_casa_train[1] * i), normal_casa_train[0] + (normal_casa_train[1] * s)]
ax.plot([i, s], temp, color="red", label="Normal")
temp2 = [gradiente_casa_train[0] + (gradiente_casa_train[1] * i), gradiente_casa_train[0] + (gradiente_casa_train[1] * s)]
ax.plot([i, s], temp2, color="black", label="Gradient")

ax.plot(casa_train[:,1], casa_train[:,2], 'bo')

ax.legend(loc="lower right", title="Legend Title", frameon=False)
plt.show()

# Experimento 4

thetas = np.array([[0,-2], [0,-1.5], [0,-1], [0,-0.5], [0,0], [0,0.5], [0,1], [0,1.5], [0,2], [0,2.5], [0,3], [0,3.5], [0,4]])
result_thetas_train = np.zeros([13])
result_thetas_test = np.zeros([13])
# CASA

for th in range(0, len(thetas)):
    result_thetas_train[th] = costo(thetas[th], casa_train)
    result_thetas_test[th] = costo(thetas[th], casa_test)

fig, ax = plt.subplots(1, figsize=(8, 6))
fig.suptitle('Precio Vivienda ', fontsize=15)

plt.xlabel('theta')
plt.ylabel('F(theta)')

ax.plot(thetas[:,1], result_thetas_train, color="red", label="train")
ax.plot(thetas[:,1], result_thetas_test, color="black", label="test")

ax.legend(loc="lower right", title="Legend Title", frameon=False)
plt.show()


# OCEANO
for th in range(0, len(thetas)):
    result_thetas_train[th] = costo(thetas[th], oceano_train)
    result_thetas_test[th] = costo(thetas[th], oceano_test)

fig, ax = plt.subplots(1, figsize=(8, 6))
fig.suptitle('Temperatura OcÃ©ano', fontsize=15)

plt.xlabel('theta')
plt.ylabel('F(theta)')

ax.plot(thetas[:,1], result_thetas_train, color="red", label="train")
ax.plot(thetas[:,1], result_thetas_test, color="black", label="test")

ax.legend(loc="lower right", title="Legend Title", frameon=False)
plt.show()


# PETROLEO
thetas = np.array([[0,-2,-2,-2,-2], [0,-1.5,-1.5,-1.5,-1.5], [0,-1,-1,-1,-1], [0,-0.5,-0.5,-0.5,-0.5], [0,0,0,0,0], 
                   [0,0.5,0.5,0.5,0.5], [0,1,1,1,1], [0,1.5,1.5,1.5,1.5], [0,2,2,2,2], [0,2.5,2.5,2.5,2.5], 
                   [0,3,3,3,3], [0,3.5,3.5,3.5,3.5], [0,4,4,4,4]])
for th in range(0, len(thetas)):
    result_thetas_train[th] = costo(thetas[th], petroleo_train)
    result_thetas_test[th] = costo(thetas[th], petroleo_test)

fig, ax = plt.subplots(1, figsize=(8, 6))
fig.suptitle('Consumo PetrÃ³leo ', fontsize=15)

plt.xlabel('theta')
plt.ylabel('F(theta)')

ax.plot(thetas[:,1], result_thetas_train, color="red", label="train")
ax.plot(thetas[:,1], result_thetas_test, color="black", label="test")

ax.legend(loc="lower right", title="Legend Title", frameon=False)
plt.show()
